import { PrismaService } from '../prisma/prisma.service';
import { CreateUserDto } from './dto/create-user.dto';
import { UpdateUserDto } from './dto/update-user.dto';
export declare class UsersService {
    private prisma;
    private transporter;
    constructor(prisma: PrismaService);
    create(createUserDto: CreateUserDto): Promise<{
        smileCoinBalances: {
            id: string;
            balance: import("@prisma/client/runtime/library").Decimal;
            createdAt: Date;
            updatedAt: Date;
            userId: string;
            region: string;
        }[];
        id: string;
        email: string;
        firstName: string;
        lastName: string;
        resetTokenExpiry: Date | null;
        refreshTokenExpires: Date | null;
        isVerified: boolean;
        phone: string | null;
        address: string | null;
        avatar: string | null;
        role: import(".prisma/client").$Enums.UserRole;
        status: import(".prisma/client").$Enums.UserStatus;
        balance: import("@prisma/client/runtime/library").Decimal;
        totalSpent: import("@prisma/client/runtime/library").Decimal;
        totalOrders: number;
        commission: import("@prisma/client/runtime/library").Decimal | null;
        totalEarnings: import("@prisma/client/runtime/library").Decimal | null;
        referralCode: string | null;
        referredBy: string | null;
        downlineCount: number | null;
        lastLoginAt: Date | null;
        createdAt: Date;
        updatedAt: Date;
    }>;
    private generateTemporaryPassword;
    private sendWelcomeEmail;
    resendSetupEmail(userId: string): Promise<{
        message: string;
    }>;
    findByEmail(email: string): Promise<{
        id: string;
        email: string;
        firstName: string;
        lastName: string;
        password: string;
        resetToken: string | null;
        resetTokenExpiry: Date | null;
        refreshToken: string | null;
        refreshTokenExpires: Date | null;
        otpSecret: string | null;
        isVerified: boolean;
        phone: string | null;
        address: string | null;
        avatar: string | null;
        role: import(".prisma/client").$Enums.UserRole;
        status: import(".prisma/client").$Enums.UserStatus;
        balance: import("@prisma/client/runtime/library").Decimal;
        totalSpent: import("@prisma/client/runtime/library").Decimal;
        totalOrders: number;
        commission: import("@prisma/client/runtime/library").Decimal | null;
        totalEarnings: import("@prisma/client/runtime/library").Decimal | null;
        referralCode: string | null;
        referredBy: string | null;
        downlineCount: number | null;
        lastLoginAt: Date | null;
        createdAt: Date;
        updatedAt: Date;
    } | null>;
    findById(id: string): Promise<({
        smileCoinBalances: {
            id: string;
            balance: import("@prisma/client/runtime/library").Decimal;
            createdAt: Date;
            updatedAt: Date;
            userId: string;
            region: string;
        }[];
    } & {
        id: string;
        email: string;
        firstName: string;
        lastName: string;
        password: string;
        resetToken: string | null;
        resetTokenExpiry: Date | null;
        refreshToken: string | null;
        refreshTokenExpires: Date | null;
        otpSecret: string | null;
        isVerified: boolean;
        phone: string | null;
        address: string | null;
        avatar: string | null;
        role: import(".prisma/client").$Enums.UserRole;
        status: import(".prisma/client").$Enums.UserStatus;
        balance: import("@prisma/client/runtime/library").Decimal;
        totalSpent: import("@prisma/client/runtime/library").Decimal;
        totalOrders: number;
        commission: import("@prisma/client/runtime/library").Decimal | null;
        totalEarnings: import("@prisma/client/runtime/library").Decimal | null;
        referralCode: string | null;
        referredBy: string | null;
        downlineCount: number | null;
        lastLoginAt: Date | null;
        createdAt: Date;
        updatedAt: Date;
    }) | null>;
    findOne(emailOrId: string): Promise<{
        id: string;
        email: string;
        firstName: string;
        lastName: string;
        password: string;
        resetToken: string | null;
        resetTokenExpiry: Date | null;
        refreshToken: string | null;
        refreshTokenExpires: Date | null;
        otpSecret: string | null;
        isVerified: boolean;
        phone: string | null;
        address: string | null;
        avatar: string | null;
        role: import(".prisma/client").$Enums.UserRole;
        status: import(".prisma/client").$Enums.UserStatus;
        balance: import("@prisma/client/runtime/library").Decimal;
        totalSpent: import("@prisma/client/runtime/library").Decimal;
        totalOrders: number;
        commission: import("@prisma/client/runtime/library").Decimal | null;
        totalEarnings: import("@prisma/client/runtime/library").Decimal | null;
        referralCode: string | null;
        referredBy: string | null;
        downlineCount: number | null;
        lastLoginAt: Date | null;
        createdAt: Date;
        updatedAt: Date;
    } | null>;
    loginByEmailAndPassword(email: string, password: string): Promise<{
        id: string;
        email: string;
        firstName: string;
        lastName: string;
        password: string;
        resetToken: string | null;
        resetTokenExpiry: Date | null;
        refreshToken: string | null;
        refreshTokenExpires: Date | null;
        otpSecret: string | null;
        isVerified: boolean;
        phone: string | null;
        address: string | null;
        avatar: string | null;
        role: import(".prisma/client").$Enums.UserRole;
        status: import(".prisma/client").$Enums.UserStatus;
        balance: import("@prisma/client/runtime/library").Decimal;
        totalSpent: import("@prisma/client/runtime/library").Decimal;
        totalOrders: number;
        commission: import("@prisma/client/runtime/library").Decimal | null;
        totalEarnings: import("@prisma/client/runtime/library").Decimal | null;
        referralCode: string | null;
        referredBy: string | null;
        downlineCount: number | null;
        lastLoginAt: Date | null;
        createdAt: Date;
        updatedAt: Date;
    }>;
    updateLastLogin(userId: string): Promise<void>;
    storeRefreshToken(userId: string, refreshToken: string): Promise<void>;
    validateRefreshToken(userId: string, refreshToken: string): Promise<boolean>;
    revokeRefreshToken(userId: string): Promise<void>;
    setOtpSecret(userId: string, otp: string): Promise<void>;
    setResetToken(email: string, token: string, expiryDate: Date): Promise<void>;
    resetPassword(token: string, newPassword: string): Promise<void>;
    verifyUser(userId: string): Promise<void>;
    findAll(filters?: {
        role?: string;
        status?: string;
        search?: string;
        skip?: number;
        take?: number;
        sortBy?: string;
        sortOrder?: 'asc' | 'desc';
    }): Promise<{
        users: ({
            smileCoinBalances: {
                id: string;
                balance: import("@prisma/client/runtime/library").Decimal;
                createdAt: Date;
                updatedAt: Date;
                userId: string;
                region: string;
            }[];
        } & {
            id: string;
            email: string;
            firstName: string;
            lastName: string;
            password: string;
            resetToken: string | null;
            resetTokenExpiry: Date | null;
            refreshToken: string | null;
            refreshTokenExpires: Date | null;
            otpSecret: string | null;
            isVerified: boolean;
            phone: string | null;
            address: string | null;
            avatar: string | null;
            role: import(".prisma/client").$Enums.UserRole;
            status: import(".prisma/client").$Enums.UserStatus;
            balance: import("@prisma/client/runtime/library").Decimal;
            totalSpent: import("@prisma/client/runtime/library").Decimal;
            totalOrders: number;
            commission: import("@prisma/client/runtime/library").Decimal | null;
            totalEarnings: import("@prisma/client/runtime/library").Decimal | null;
            referralCode: string | null;
            referredBy: string | null;
            downlineCount: number | null;
            lastLoginAt: Date | null;
            createdAt: Date;
            updatedAt: Date;
        })[];
        total: number;
        hasMore: boolean;
    }>;
    getUserStats(): Promise<{
        totalUsers: number;
        totalRetailers: number;
        totalResellers: number;
        activeUsers: number;
        totalBalance: number | import("@prisma/client/runtime/library").Decimal;
        totalSpent: number | import("@prisma/client/runtime/library").Decimal;
    }>;
    update(id: string, updateUserDto: UpdateUserDto): Promise<{
        smileCoinBalances: {
            id: string;
            balance: import("@prisma/client/runtime/library").Decimal;
            createdAt: Date;
            updatedAt: Date;
            userId: string;
            region: string;
        }[];
    } & {
        id: string;
        email: string;
        firstName: string;
        lastName: string;
        password: string;
        resetToken: string | null;
        resetTokenExpiry: Date | null;
        refreshToken: string | null;
        refreshTokenExpires: Date | null;
        otpSecret: string | null;
        isVerified: boolean;
        phone: string | null;
        address: string | null;
        avatar: string | null;
        role: import(".prisma/client").$Enums.UserRole;
        status: import(".prisma/client").$Enums.UserStatus;
        balance: import("@prisma/client/runtime/library").Decimal;
        totalSpent: import("@prisma/client/runtime/library").Decimal;
        totalOrders: number;
        commission: import("@prisma/client/runtime/library").Decimal | null;
        totalEarnings: import("@prisma/client/runtime/library").Decimal | null;
        referralCode: string | null;
        referredBy: string | null;
        downlineCount: number | null;
        lastLoginAt: Date | null;
        createdAt: Date;
        updatedAt: Date;
    }>;
    remove(id: string): Promise<void>;
    updateBalance(userId: string, amount: number): Promise<void>;
    updateSmileBalance(userId: string, region: string, amount: number): Promise<number>;
    getBalance(userId: string): Promise<{
        balance: number;
        smileCoinBalances: any[];
    }>;
    private generateUniqueReferralCode;
}
